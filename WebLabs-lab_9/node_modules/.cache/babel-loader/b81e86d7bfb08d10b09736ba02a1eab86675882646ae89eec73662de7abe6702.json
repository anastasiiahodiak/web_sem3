{"ast":null,"code":"const Ship = require('./models/Ship'); // Замість './models/Ship' вкажи правильний шлях до моделі Ship\nconst express = require('express');\nconst mysql = require('mysql2');\nconst multer = require('multer');\nconst path = require('path');\nconst app = express();\nconst port = 3001;\nconst db = mysql.createConnection({\n  host: '127.0.0.1',\n  user: 'root',\n  password: 'mySQL803',\n  database: 'ships_db'\n});\nconst storage = multer.diskStorage({\n  destination: './uploads/',\n  filename: function (req, file, cb) {\n    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage: storage\n}).single('image');\napp.use(express.json());\napp.use('/uploads', express.static('uploads'));\nconst shipSchema = {\n  title: 'VARCHAR(255)',\n  text: 'VARCHAR(255)',\n  type: 'VARCHAR(255)',\n  price: 'INT',\n  imageUrl: 'VARCHAR(255)'\n};\nconst createTableQuery = `CREATE TABLE IF NOT EXISTS ships (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    ${Object.entries(shipSchema).map(([col, type]) => `${col} ${type}`).join(',\\n')}\n  )`;\ndb.query(createTableQuery, err => {\n  if (err) {\n    console.error('Error creating MySQL table:', err);\n  } else {\n    console.log('MySQL table created');\n  }\n});\napp.post('/api/upload', (req, res) => {\n  upload(req, res, err => {\n    if (err) {\n      console.error(err);\n      res.status(500).json({\n        error: 'Error uploading image'\n      });\n    } else {\n      res.json({\n        imageUrl: `/uploads/${req.file.filename}`\n      });\n    }\n  });\n});\napp.get('/api/ships', (req, res) => {\n  const query = 'SELECT * FROM ships';\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error executing MySQL query:', err);\n      res.status(500).json({\n        error: 'Internal Server Error'\n      });\n    } else {\n      res.json(results);\n    }\n  });\n});\napp.post('/api/ships', (req, res) => {\n  const {\n    title,\n    type,\n    price,\n    imageUrl,\n    text\n  } = req.body;\n  const insertQuery = 'INSERT INTO ships (title, type, price, imageUrl, text) VALUES (?, ?, ?, ?, ?)';\n  const values = [title, type, price, imageUrl, text];\n  db.query(insertQuery, values, (err, result) => {\n    if (err) {\n      console.error('Error executing MySQL query:', err);\n      res.status(500).json({\n        error: 'Internal Server Error'\n      });\n    } else {\n      res.json({\n        id: result.insertId,\n        title,\n        type,\n        price,\n        imageUrl,\n        text\n      });\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\napp.get('/api/shipTypes', async (req, res) => {\n  try {\n    const distinctTypesQuery = 'SELECT DISTINCT type FROM ships';\n    const types = await db.promise().query(distinctTypesQuery);\n    res.json(types[0].map(type => type.type));\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});","map":{"version":3,"names":["Ship","require","express","mysql","multer","path","app","port","db","createConnection","host","user","password","database","storage","diskStorage","destination","filename","req","file","cb","fieldname","Date","now","extname","originalname","upload","single","use","json","static","shipSchema","title","text","type","price","imageUrl","createTableQuery","Object","entries","map","col","join","query","err","console","error","log","post","res","status","get","results","body","insertQuery","values","result","id","insertId","listen","distinctTypesQuery","types","promise"],"sources":["C:/Users/Анастасія Годяк/politex/sem3/web/lab9/WebLabs-lab_9/src/service/server.js"],"sourcesContent":["const Ship = require('./models/Ship'); // Замість './models/Ship' вкажи правильний шлях до моделі Ship\r\nconst express = require('express');\r\nconst mysql = require('mysql2');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst port = 3001;\r\n\r\nconst db = mysql.createConnection({\r\n  host: '127.0.0.1',\r\n  user: 'root',\r\n  password: 'mySQL803',\r\n  database: 'ships_db',\r\n});\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: './uploads/',\r\n  filename: function (req, file, cb) {\r\n    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\r\n  },\r\n});\r\n\r\nconst upload = multer({ storage: storage }).single('image');\r\n\r\napp.use(express.json());\r\napp.use('/uploads', express.static('uploads'));\r\n\r\nconst shipSchema = {\r\n  title: 'VARCHAR(255)',\r\n  text: 'VARCHAR(255)',\r\n  type: 'VARCHAR(255)',\r\n  price: 'INT',\r\n  imageUrl: 'VARCHAR(255)',\r\n};\r\n\r\nconst createTableQuery = `CREATE TABLE IF NOT EXISTS ships (\r\n    id INT AUTO_INCREMENT PRIMARY KEY,\r\n    ${Object.entries(shipSchema).map(([col, type]) => `${col} ${type}`).join(',\\n')}\r\n  )`;\r\n\r\n  \r\ndb.query(createTableQuery, (err) => {\r\n  if (err) {\r\n    console.error('Error creating MySQL table:', err);\r\n  } else {\r\n    console.log('MySQL table created');\r\n  }\r\n});\r\n\r\napp.post('/api/upload', (req, res) => {\r\n  upload(req, res, (err) => {\r\n    if (err) {\r\n      console.error(err);\r\n      res.status(500).json({ error: 'Error uploading image' });\r\n    } else {\r\n      res.json({ imageUrl: `/uploads/${req.file.filename}` });\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/api/ships', (req, res) => {\r\n  const query = 'SELECT * FROM ships';\r\n  db.query(query, (err, results) => {\r\n    if (err) {\r\n      console.error('Error executing MySQL query:', err);\r\n      res.status(500).json({ error: 'Internal Server Error' });\r\n    } else {\r\n      res.json(results);\r\n    }\r\n  });\r\n});\r\n\r\napp.post('/api/ships', (req, res) => {\r\n    const { title, type, price, imageUrl, text } = req.body;\r\n    const insertQuery = 'INSERT INTO ships (title, type, price, imageUrl, text) VALUES (?, ?, ?, ?, ?)';\r\n    const values = [title, type, price, imageUrl, text];\r\n    \r\n    db.query(insertQuery, values, (err, result) => {\r\n      if (err) {\r\n        console.error('Error executing MySQL query:', err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      } else {\r\n        res.json({ id: result.insertId, title, type, price, imageUrl, text });\r\n      }\r\n    });\r\n  });\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\napp.get('/api/shipTypes', async (req, res) => {\r\n    try {\r\n      const distinctTypesQuery = 'SELECT DISTINCT type FROM ships';\r\n      const types = await db.promise().query(distinctTypesQuery);\r\n      res.json(types[0].map((type) => type.type));\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n  });\r\n  \r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}